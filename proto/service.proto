syntax = "proto3";

package proto;
option go_package = ".;proto";


// @@@ - client connection request for connect to server

// close response
message Close {}

// error response
message ErrorResponse{
  string message = 1;
  int32 code = 2;
}


message PingRequest{}
message PingResponse{}

message EmptyRequest{}

message LoginRequest{
  string username = 1;
  string password = 2;
}
message LoginResponse{
  string token = 1;
  uint32 userId = 2;
}







// ======================== Stream Response


message MessageStream{
  string msg_id = 1;
  StreamData data = 2;
}

message StreamData {
  oneof data{
    Header header = 1;
    Text text = 2;
    File file = 3;
  }
  message Header{
    string timestamp = 3;
    string from = 4;
    string type = 5;
  }
  message Text{
    string content = 1; 
  }
  message File{
    oneof file{
      FileInfo info = 1;
      bytes chunk = 2;
      bool end = 3;
    }
  }
}




// ======================== Message Request

message MessageRequest{
  string token = 2;
  string content = 1; // can be empty
  string type = 3; // text|file
  uint32 chat_id = 4;
  repeated RepliedMessage repliedMessages = 5;

  message RepliedMessage{
    uint32 messageId = 1;
    bool wholeMessage = 2;
    repeated uint32 selectedAttachments = 3;
  }
}

message MessageResponse{
  uint32 message_id = 1;
}

// ======================== File Upload Request

message FileInfo {
  string name = 1;
  uint32 size = 2;
  string type = 3; // image|video|audio
}

message FileRequest{
  string request_id = 5;
  uint32 message_id =  1;
  oneof data{
    FileInfo info = 2;
    string chunk = 3;
    bool done = 4;
  }
}
message FileResponse{
  string status = 1;
  uint32 attachment_id = 2;
}

message AddUserRequest{
  string  username = 1;       
  string	password = 2;       
  string	displayName  = 3;  
  string	phoneNumber  = 4;
  string	email  = 5;
}
message AddUserResponse{
  uint32 userId = 1;
  string status = 2;
}

message CreateChatRequest{
  string name = 1;
  string type = 2; // private, public, channel, personal
  // bool isGroup = 2;
}
message CreateChatResponse{
  uint32 chat_id = 1;
}

// =================================================================

message StreamRequest {
  string token = 1;
}
message StreamResponse{
  oneof data{
    Messages messages = 1;
    Chats chats = 2;
  }
}
message Messages{
  repeated MessageData data = 1;
}

message GetMessagesRequest{
  uint32 chat_id = 1;
  uint32 from_msg_id = 2;
  
  uint32 last_msg_id = 3;
  Direction direction = 4; // next , previous
  int32 count = 5;
  
  // Only use this options for set "Follow" state on "previous" direction include messages
  // if  (len(comming_messages) + page_size) < page_max then Follow = true
  int32 page_size = 6; // current page size
  int32 page_max = 7; // maximum page size
  
  string token = 8;
  
  enum Direction{
    None = 0;
    NextPage = 1;
    PrevPage = 2;
    BothPage = 3;
    LastPage = 4;
  }
}
message GetMessagesResponse{}


message MessageData{
  uint32 senderId = 1; // Sender user id
  uint32 messageId = 2; // Message id
  string content = 3; // Message content
  repeated Attachment attachements = 4;
  repeated RepliedMessage repliedMessages = 5; // Message replied messages
  int64 sendAt = 6;
}
message Attachment{
  string placeholder = 1; // image placeholder of the attachment
  string type = 2; // image|video|audio|other
  string url = 3; // URL of attachment
}
message RepliedMessage{
  uint32 messageId = 1; // Replied message id
  string content = 2; // Replied message content
  repeated string thumbnails = 3; // Replied message thumbnails
}


message GetChatsRequest{
  string token = 1;
}
message Chats{
  repeated ChatData data = 1;  
}
message ChatData{
  uint32 chat_id = 1; // Chat id
  string chat_title = 2; // Title of Chat
  string type = 3; // Type of Chat : group|channel|private
  bool mute = 4; // Whether to mute
  string avatar_url = 5; // URL of avatar
  string last_message = 6; // Last message
  string unreaded_messages_count = 7; // Unreaded messages count
  uint32 last_readed_message_id = 8; // Last message id
}


message CreateGroupRequest{
  string token = 1;
  string name = 2;

}
message CreateGroupResponse{
  uint32 groupId = 1;
  uint32 chat_id = 2;
}

message JoinGroupRequest{
  string token = 1;
  uint32 chat_id = 2;
  string role = 3;
}
message JoinGroupResponse{

}

message AddMemberRequest{
  uint32 chat_id = 1;
  repeated uint32 membersId = 2;
}
message AddMemberResponse{
  string status = 1;
}

message MemberInfoRequest{
  string token = 1;
  uint32 chat_id = 2;
  oneof info{
    bool mute = 3;
    uint32 lastReadedMessageId = 4;
  }
}
message MemberInfoResponse{
}


message SelectChatRequest{
  string token = 1;
  uint32 chat_id = 2;
}

message ChatNoticeRequest{
  string token = 1;
    uint32 chat_id = 2;
    uint32 readed_msg_id  = 3;
}

service ChatService {
  rpc StreamChannel(StreamRequest) returns (stream StreamResponse);
  rpc GetMessages(GetMessagesRequest) returns (stream Messages);
  rpc ChatNotice(ChatNoticeRequest) returns (Close);

  rpc AddUser(AddUserRequest) returns (AddUserResponse);
  rpc AddMember(AddMemberRequest) returns (AddMemberResponse);
  rpc Login(LoginRequest) returns (LoginResponse);
  rpc Ping(PingRequest) returns (PingResponse);

  rpc CreateChat(CreateChatRequest) returns (CreateChatResponse);
  rpc UpdateMemberInfo(MemberInfoRequest) returns (MemberInfoResponse);
  rpc CreateGroup(CreateGroupRequest) returns (CreateGroupResponse);
  rpc JoinGroup(JoinGroupRequest) returns (JoinGroupResponse);
  rpc SendMessage(MessageRequest) returns (MessageResponse);
  rpc UploadFile(FileRequest) returns (FileResponse);

  // Just for test
  rpc GetChats(GetChatsRequest) returns (Chats);
  
}
