syntax = "proto3";

package proto;
option go_package = ".;proto";


// @@@ - client connection request for connect to server
message Connect {
  string token = 1;
}


// close response
message Close {}

// @@@ - server response to client, can be user token or message
// message ServerResponse{
//   string status = 1;  
//   ErrorResponse error = 2;
//   oneof extra{
//     TokenResponse token = 3;
//     MessageResponse message = 4;
//   }
// }

// error response
message ErrorResponse{
  string message = 1;
  int32 code = 2;
}
// message response
message MessageResponse{
  Message msg = 1;
  string timestamp = 2;
  string from = 3;
}
// token response
// message TokenResponse{
//   string token = 1;
// }


// message struct which may be TEXT or FILE
message Message {
  oneof data{
    TextMessage text_msg = 1;
    FileMessage file_msg = 2;
  }
}
// text message
message TextMessage {
  string content = 1;
}
// file message
message FileMessage {
  oneof data{
    FileInfo info = 1;
    bytes chunk_data = 2;
    bool done = 3;
  }
}
// file info struct
message FileInfo {
  string name = 1;
  uint32 size = 2;
}


message PingRequest{}
message PingResponse{}

message EmptyRequest{}

message LoginRequest{
  string username = 1;
  string password = 2;
}
message LoginResponse{
  string token = 1;
}

service ChatService {
  rpc MessageChannel(Connect) returns (stream MessageResponse);
  rpc Login(LoginRequest) returns (LoginResponse);
  rpc Ping(PingRequest) returns (PingResponse);
  // rpc GetMessages(EmptyRequest) returns (Close);
}
