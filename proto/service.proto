syntax = "proto3";

package proto;
option go_package = ".;proto";


// @@@ - client connection request for connect to server
message Connect {
  string token = 1;
}

// close response
message Close {}

// error response
message ErrorResponse{
  string message = 1;
  int32 code = 2;
}


message PingRequest{}
message PingResponse{}

message EmptyRequest{}

message LoginRequest{
  string username = 1;
  string password = 2;
}
message LoginResponse{
  string token = 1;
}







// ======================== Stream Response


message MessageStream{
  string msg_id = 1;
  StreamData data = 2;
}

message StreamData {
  oneof data{
    Header header = 1;
    Text text = 2;
    File file = 3;
  }
  message Header{
    string timestamp = 3;
    string from = 4;
    string type = 5;
  }
  message Text{
    string content = 1; 
  }
  message File{
    oneof file{
      FileInfo info = 1;
      bytes chunk = 2;
      bool end = 3;
    }
  }
}




// ======================== Message Request

message MessageRequest{
  string token = 2;
  string content = 1; // can be empty
  string type = 3; // text|file
  uint32 chat_id = 4;
  repeated RepliedMessage repliedMessages = 5;

  message RepliedMessage{
    uint32 messageId = 1;
    bool wholeMessage = 2;
    repeated uint32 selectedAttachments = 3;
  }
}

message MessageResponse{
  uint32 message_id = 1;
}

// ======================== File Upload Request

message FileInfo {
  string name = 1;
  uint32 size = 2;
  string type = 3; // image|video|audio
}

message FileRequest{
  string request_id = 5;
  uint32 message_id =  1;
  oneof data{
    FileInfo info = 2;
    string chunk = 3;
    bool done = 4;
  }
}
message FileResponse{
  string status = 1;
}

message AddUserRequest{
  string  username = 1;       
  string	password = 2;       
  string	displayName  = 3;  
  string	phoneNumber  = 4;
  string	email  = 5;
}
message AddUserResponse{
  uint32 userId = 1;
  string status = 2;
}

message CreateChatRequest{
  string name = 1;
  bool isGroup = 2;
}
message CreateChatResponse{
  uint32 chatId = 1;
}

message GetMessagesRequest{
  uint32 chatId = 1;
}
message MessagesResponse{
  repeated MessageData data = 1;

  message MessageData{
    uint32 senderId = 1; // Sender user id
    uint32 messageId = 2; // Message id
    string content = 3; // Message content
    repeated Attachment attachements = 4;
    repeated RepliedMessage repliedMessages = 5; // Message replied messages
    int64 sendAt = 6;
  }
  message Attachment{
    string placeholder = 1; // image placeholder of the attachment
    string type = 2; // image|video|audio|other
    string url = 3; // URL of attachment
  }
  message RepliedMessage{
    uint32 messageId = 1; // Replied message id
    string content = 2; // Replied message content
    repeated string thumbnails = 3; // Replied message thumbnails
  }
}


service ChatService {
  rpc MessageChannel(Connect) returns (stream MessageStream);
  rpc AddUser(AddUserRequest) returns (AddUserResponse);
  rpc Login(LoginRequest) returns (LoginResponse);
  rpc Ping(PingRequest) returns (PingResponse);

  rpc CreateChat(CreateChatRequest) returns (CreateChatResponse);
  rpc SendMessage(MessageRequest) returns (MessageResponse);
  rpc GetMessages(GetMessagesRequest) returns (MessagesResponse);
  rpc UploadFile(FileRequest) returns (FileResponse);
  // rpc DownloadFile(FileRequest) returns (FileResponse);
  
}
